SORT:
T_DPTR_LOW      EQU 0X35    ;EQUATE DIFFRENTS IMPORTANT DATA LOCATION
T_DPTR_HIGH     EQU 0X36    
    
    
    POP 0X7F                ;RETURN ADDRESS OF SUBROUTINE 
    POP 0X7E 
    POP DPH                 ;BASE ADDRESS OF ARRAY 
    POP DPL 
    POP ACC                 ;COUNTER REGISTER 
    PUSH 0X7E 
    PUSH 0X7F               ;RETURN ADDRESS PUSH INTO STACK MEMORY AREA 

    MOV T_DPTR_HIGH,DPH     ;STORE KEYELEMENT DATA POINTER  
    MOV T_DPTR_LOW,DPL 

    MOV R0,A                ;INDEX COUNTER REGISTER FOR BEGNING 
    MOV R1,A                ;COUNTER REGISTER FOR REPEATITION IN ENTIRE LIST 
    MOV R2,DPL      
    MOV R3,DPH              ;TEMP STORE DATA POINTER 
    
LOOP_SORT:
    MOV A,R0 
    ADD A,0X00 
    JZ EXIT_SORT            ;EXIT SUBROUTINE IF R0 REG. == 0 
    
    MOVX A,@DPTR 
    MOV R5,A 
    
REPEAT_SORT:
    INC DPTR 
    MOVX A,@DPTR 
    MOV R6,A 

    SUBB A,R5 
    JNC NOTSWAP_SORT 
        MOV A,R6 
        MOV DPL,T_DPTR_LOW
        MOV DPH,T_DPTR_HIGH
        MOVX @DPTR,A  
            
        MOV DPL,R2 
        MOV DPH,R3 
        MOV A,R5
        MOVX A,@DPTR 
NOTSWAP_SORT:
        MOV R3,DPL 
        MOV R4,DPH                  ;AGAIN STORE DATA POINTER INTO IT'S REGISTERS 
    
    DJNZ R1,REPEAT_SORT

    MOV DPL,T_DPTR_LOW      
    MOV DPH,T_DPTR_HIGH
    INC DPTR                        ;INC DPTR (LOAD NEW LOCATION OF KEY REGISTER)
    MOV T_DPTR_HIGH,DPH
    MOV T_DPTR_LOW,DPL 

    INC DPTR 
    MOV R3,DPL 
    MOV R4,DPH 
    MOV DPL,T_DPTR_LOW
    MOV DPH,T_DPTR_HIGH

    DEC R0                          ;DECREMENT INDEX REGISTER BY 1 
    SJMP LOOP_SORT
EXIT_SORT:
    RET                             ;RETURN SUBROUTINE
